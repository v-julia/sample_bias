import argparse
import sys
import os
import re
import numpy as np
import matplotlib.pyplot as plt
import statistics


def plot_hist_rates(rates, mu, sigma, title, filename):

    '''
    Plots histogram of rates, shows min rate, standard deviations
    as vertical lines on hist. Saves the figure with histogram in
    the filename

    Input arguments:
    rates - type list, list with rates derived from tree-file
    mu - type int, mean rate
    sigma - type int, standard deviation of rates
    title - type str, title for histogram
    filename - type str, name of file to save the figure
    '''

    bins = []  # bins for histogram

    step = (max(rates) - min(rates))/15
    min_xlim = min(rates) - step
    max_xlim = max(rates) + step

    i = min_xlim
    while i <= max_xlim:
        bins.append(i)
        i += step

    plt.hist(rates, bins)

    plt.xlim(min_xlim, max_xlim+step)

    # plots sd lines
    xposition = [mu-3*sigma, mu-2*sigma, mu-sigma,  mu, mu+sigma,\
                mu+2*sigma, mu+3*sigma]
    for xc in xposition:
        plt.axvline(x=xc, color='red', linestyle='--')

    # vertical line with mean
    plt.axvline(x=mu, color='red')
    plt.title(title)

    # plots values of mean and standart deviation
    plt.text(min_xlim+5*step, 20, '$\mu='+str(mu)+', \sigma$='+str(sigma) +
            ' , $\sigma / \mu$='+str(round(sigma/mu, 4)), fontsize=12)
    plt.xlabel("Substitution rate")
    plt.ylabel("Frequency")
    plt.savefig(filename, transparent=True)
    plt.show()
    plt.close()


def get_rates(f_name, output_dir):

    '''
    Derives tree's branch substitution rates from tree-file in nexus format
    (output of TreeAnnotator program). Saves derived rates and logarithms
    of rates into "rates.txt" file located in output_dir. Returns tuple
    (rates, mu, sigma, rates_log, mu_log, sigma_log) where
    rates - list with rates,
    mu - mean of rates values,
    sigma - standard deviation of rates,
    rates_log - list with log rates
    mu_log - mean of log rates
    sigma_log - sd of log_rates
    
    Input arguments:
    f_name - type str, name of tree-file
    output_dir - type str, path to output directory
    '''

    file = open(f_name, 'r')  # opens tree-file

    # finds section with tree in parenthesis form
    for line in file:
        if line[0:4] == 'tree':
            # searches for rates
            m = re.findall("rate=[0-9]+\.[0-9E\-]+", line)
    file.close()

    # opens output text file to save rates
    file_out = open(output_dir + f_name.split('/')[-1].split('.')[0] + '_rates.txt', 'w')

    # calculation of rates mean and sd
    rates = []
    rates_log = []
    for rate in m:
        rate = rate[5:]
        # print(rate)
        rates.append(float(rate))
        rate_log = np.log10(float(rate))
        rates_log.append(rate_log)
        file_out.write(rate+'    '+str(rate_log)+'\n')
    mu = round(statistics.mean(rates), 4)
    sigma = round(statistics.stdev(rates), 4)

    mu_log = round(statistics.mean(rates_log), 4)
    sigma_log = round(statistics.stdev(rates_log), 4)
    
    file_out.write('mu = ' + str(mu) + '\n')
    file_out.write('stdev = ' + str(sigma) + '\n')
    file_out.write('mu_log = ' + str(mu_log) + '\n')
    file_out.write('stdev_log = ' + str(sigma_log) + '\n')
    file_out.close()

    return rates, mu, sigma, rates_log, mu_log, sigma_log

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-input", "--input_file", type=str,
                help="Input file with tree-file generated by TreeAnnotator",
                required=True)
    parser.add_argument("-out_dir", "--output_dir", type=str,
                        help="Output directory to save generated alignments")
    parser.add_argument("-t", "--title", type=str,
                        help="Title for plot", required=True)
    parser.add_argument("-f", "--format", type=str,
                        help="format of figure", required=True)
    args = parser.parse_args()

    rates, mu, sigma, rates_log, mu_log, sigma_log = get_rates(args.input_file, args.output_dir)

    out_fig_name = output_dir + '.'.join(input_file.split('/')[-1].split('.')[:-1]) + '_rates.' + args.format
    out_fig_name = output_dir + '.'.join(input_file.split('/')[-1].split('.')[:-1]) + '_lrates.' + args.format

    plot_hist_rates(rates, mu, sigma,
            "Rate distribution in tree of " + title, out_fig_name)
    plot_hist_rates(rates_log, mu_log, sigma_log,
            "Log rate distribution in tree of " + title, out_fig_name)
