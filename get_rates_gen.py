#this script gets rate of isolates with changed isoltaion date or sequence
#then creates table with rates
import os
import re
import sys
import numpy as np
import statistics
import matplotlib.pyplot as plt

'''
Retrieves subsitution rate of sequence with id seq_name from file with MCC tree

Input:
    tree_path - str - path to file with MCC tree generated by TreeAnnotator
    seq_name -str - id of sequence
Output:
    rate - float - subsitution rate of branch leading to seq_name
'''
def get_rate(tree_path, seq_name):
    # file with mcc tree
    file_tree = open(tree_path, 'r')
    # flag , k=1 if Translation block has started
    k = 0
    for line in file_tree:
        if line == '\tTranslate\n':
            k =1
            continue
        if k == 1:
            # line contains sequences' ids and their serial number in parentheses tree
            line = ((line.strip('\n')).strip('\t')).strip(',')
            print(line)
            #number of seq in parenthesis tree
            if line.split(' ')[1] == seq_name:
                # serial numeber of seq_name
                num = line.split(' ')[0]
                k = 0
        # parentheses tree
        if line[0:4] == 'tree':
            tree_par = line
            break
    print(num)
    tree_par = tree_par.replace('%', '')
    #  search block with seq_name's leaf
    r = re.search( r'[[(,]%s\[&[a-zA-z,_0-9\-\.=\{\}]*\]' %str(num), tree_par)
    #substring with parameters for seq number num
    numsubstr = r.group()
    print(numsubstr)
    # substitution rate
    ratesubstr = re.search(r'rate=[0-9]+\.[0-9E\-]+',numsubstr)
    print(ratesubstr.group())
    rate = round(float(ratesubstr.group()[5:]),5)
    print(rate)
    file_tree.close()
    return rate

'''
Calculates mean, sd of substitution rates and their logs. Plots frequency distribution 
of rates/ their logs, shows mean rate (solid red line) and mean+(1,2,3)sd (dashed red lines)

Input:
    tree_path - str - path to file with MCC tree generated by TreeAnnotator
    seq_name -str - id of sequence
    s - ???????????
Output:
    rate_num - float - subsitution rate of branch leading to seq_name
    mu - float - mean subsitution rate in tree
    sigma - float - standard deviation of subsitution rates in tree
'''
def get_stat(tree_path, seq_name, s=0):
    print("Get statistics")
    # output directory
    if sys.platform == 'win32' or sys.platform == 'cygwin':
        output_dir = os.path.split(tree_path)[0] + '\\'
    else:
        output_dir = os.path.split(tree_path)[0] + '/'

    #open file with tree
    print(tree_path)
    file = open(tree_path, 'r')

    # flag , k=1 if Translation block has started
      for line in file:
  k=0
        if line == '\tTranslate\n':
            k =1
            print("Sequences ids")
            continue
        if k == 1:
            # line contains sequences' ids and their serial number in parentheses tree
            line = ((line.strip('\n')).strip('\t')).strip(',')
            print(line)
            
            if line.split(' ')[1] == seq_name:
                #number of seq in parentheses tree
                num = line.split(' ')[0]
                k = 0
        # parentheses tree
        if line[0:4] == 'tree':
            tree_par = line
            # all rates in MCC tree
            m = re.findall("rate=[0-9]+\.[0-9E\-]+", line)
    file.close()
    #print(m)

    # get rate of sequence seq_name
    tree_par = tree_par.replace('%', '')
    r = re.search( r'[[(,]%s\[&[a-zA-z,_0-9\-\.=\{\}]*\]' %str(num), tree_par)
    
    # substring with parameters for seq number num
    numsubstr = r.group()
    ratesubstr = re.search(r'rate=[0-9]+\.[0-9E\-]+',numsubstr)
    rate_num = round(float(ratesubstr.group()[5:]),4)
    rate_num_log = np.log10(rate_num)
    #print(rate_num)

    # lists with rates and log rates
    rates = []
    rates_log = []
    

    # output text file with rates retrieved from tree
    file_out = open(output_dir+'rates.txt','w')

    # converts all rates found in tree into int
    for rate in m:
        rate = rate[5:]
        #print(rate)
        rates.append(round(float(rate),4))
        rate_log = np.log10(float(rate))
        rates_log.append(rate_log)
        file_out.write(rate+'\t'+str(rate_log)+'\n')

    # mean subsitution rate
    mu = round(statistics.mean(rates),4)
    # sd of subsitution rate
    sigma = round(statistics.stdev(rates),4)
    
    # mean log subsitution rate
    mu_log = round(statistics.mean(rates_log),4)
    # sd of subsitution rate
    sigma_log = round(statistics.stdev(rates_log),4)
    stri = "mean="+str(mu)+",sd="+str(sigma)+"\nmean_log="+str(mu_log)+",sigma_log="+str(sigma_log)
    file_out.write(stri)
    file_out.close()

    #print('mean ',mu)
    #print('sigma ',sigma)


    # original tree file wiyhout any changes in collection year of sequence
    if s==1:
        # bins for histogram
        bins = []
        i = min(rates)
        max_i = max(rates)
        while i<max_i + 0.001:
            bins.append(i)
            i+=0.001
        
        plt.hist(rates, bins)
        plt.xlim(0,max_i+0.001)
        plt.text(0.006,20, '$\mu='+str(mu)+', \sigma$='+str(sigma), fontsize=12)
        plt.xlabel("Substitution rate")
        xposition = [mu-3*sigma, mu-2*sigma, mu-sigma,  mu+sigma, mu+2*sigma, mu+3*sigma]
        for xc in xposition:
            plt.axvline(x=xc, color='red', linestyle='--')
        plt.axvline(x=mu, color='red', linestyle='-')
        #plt.yscale('log')
        #plt.xscale('log')
        plt.ylabel("Frequency")
        plt.savefig(output_dir+ 'rates_hist.svg', transparent = True)
        #plt.show()
        plt.close()
        return rate_num, mu, sigma, rate_num_log, mu_log, sigma_log
    # processing the file 
    else:
        if sys.platform == 'win32' or sys.platform == 'cygwin':
            # name of changed sequence
            seq_name = tree_path.split('\\')[-2]
            # mode - type of changes in sequence - mutations of change of collection year
            mode = tree_path.split('\\')[-4]
            print('mode ', mode)
            # number of mutations of years added to collection date
            num_mut = tree_path.split('\\')[-3]
        else:
            seq_name = tree_path.split('/')[-2]
            mode = tree_path.split('/')[-4]
            print('mode ', mode)
            num_mut = tree_path.split('/')[-3]
        # bins for histogram
        bins = []
        i = min(rates)
        max_i = max(rates)
        while i<max_i:
            bins.append(i)
            i+=0.001

        plt.hist(rates, bins)
        plt.xlim(0, max_i+0.001)
        plt.title(seq_name +' '+ mode+' '+num_mut)
        plt.text(0.006,25, '$\mu='+str(mu)+', \sigma$='+str(sigma), fontsize=12)
        plt.xlabel("Substitution rate")
        #plt.yscale('log')
        #plt.xscale('log')
        plt.ylabel("Frequency")
        plt.savefig(output_dir+ 'rates_hist.png', transparent = True)
        #plt.show()
        plt.close()

        
        bins_log = []
        i = min(rates_log) - 0.5
        while i<-max(rates_log) + 0.5:
            bins_log.append(i)
            i+=0.01

        plt.hist(rates_log, bins_log)
        plt.xlim(min(rates_log) - 0.1, max(rates_log) + 0.1)
        plt.title(seq_name +' '+ mode+' '+num_mut)
        plt.text(-3.5,2.6, '$\mu='+str(mu_log)+', \sigma$='+str(sigma_log), fontsize=12)
        plt.xlabel("Substitution rate, log")
        #plt.yscale('log')
        plt.ylabel("Frequency")
        plt.savefig(output_dir +'rates_hist_log.svg', transparent = True)
        #plt.show()
        plt.close()
        
        return rate_num, mu, sigma, rate_num_log, mu_log, sigma_log

'''
Input:
    path_param - str- path to folder with results of changing xml files
    sample_path -str - path to original tree
    mode - str - type of changes introduces to sequence
Ouput:
    dict_seq - dict - dictionary with rates for sequences after changing isolation year
    dict_seq[seq_name][year][rate] = rate
    dict_seq[seq_name][year][mean] = mean rate
    dict_seq[seq_name][year][sigma] = sd rate
'''
def get_rates(path_param, sample_path, mode):
    if sys.platform == 'win32' or sys.platform == 'cygwin':
        slash = '\\'
    else:
        slash = '/'
    
    if mode=='years':
        list_param_str = os.listdir(path_param)
        

        #list with years as integers
        list_param = []
        for year_str in list_param_str:
            '''
            #print(year_str)
            if year_str[-1] == '-':
                year = int(year_str[:-1])*(-1)
            else:
                year = int(year_str[:-1])
            
            '''
            year = int(year_str)
            list_param.append(year)
            
        print(list_param)

    if mode == 'mut':
        list_param_str = os.listdir(path_param)
        #print(list_param_str)
        list_param = []
        for mut in list_param_str:
            list_param.append(int(mut))
    #dictionary with rates for sequences after changing isolation year
    #dict_seq[seq_name][year][rate] = rate
    #dict_seq[seq_name][year][mean] = mean rate
    #dict_seq[seq_name][year][sigma] = sd rate
    dict_seq = {}

    dict_seq_log = {}

    list_seq = os.listdir(path_param + list_param_str[0])

    print(list_seq)
    
    file_name = sample_path.split(slash)[-1]


    #print(sample_path)
    print(file_name)
    for i in range(len(list_param)):
        for seq_name in list_seq:
            tree_path = path_param+ list_param_str[i]+slash+seq_name + slash +file_name
            if os.path.exists(tree_path):
                print(tree_path)
                if seq_name not in dict_seq.keys():
                    dict_seq[seq_name] = {}
                    dict_seq[seq_name][list_param[i]] = {}
                
                if list_param[i] not in dict_seq[seq_name].keys():
                    dict_seq[seq_name][list_param[i]] = {}

                rate, mean, sigma, rate_log, mean_log, sigma_log = get_stat(tree_path, seq_name, s=0)
                dict_seq[seq_name][list_param[i]]['rate'] = round(rate,4)
                dict_seq[seq_name][list_param[i]]['mean'] = mean
                dict_seq[seq_name][list_param[i]]['sigma'] = sigma
                dict_seq[seq_name][list_param[i]]['rate_log'] = round(rate_log,4)
                dict_seq[seq_name][list_param[i]]['mean_log'] = mean_log
                dict_seq[seq_name][list_param[i]]['sigma_log'] = sigma_log
            else:
                continue

    #sample_tree_path = 'sample/sample_al.tree'


    for seq_name in list_seq:
        tree_path = path_param+ list_param_str[0]+slash+seq_name + slash+ file_name
        if os.path.exists(tree_path):
            rate, mean, sigma, rate_log, mean_log, sigma_log = get_stat(sample_path, seq_name, s=1)
            dict_seq[seq_name][0] = {}
            dict_seq[seq_name][0]['rate'] = round(rate,4)
            dict_seq[seq_name][0]['mean'] = mean
            dict_seq[seq_name][0]['sigma'] = sigma
            dict_seq[seq_name][0]['rate_log'] = round(rate_log,4)
            dict_seq[seq_name][0]['mean_log'] = mean_log
            dict_seq[seq_name][0]['sigma_log'] = sigma_log
            
    return dict_seq

def print_table(dict_seq, path_param, mod):

    table_str = []

    str1 = ' '
    list_seq_avail = list(dict_seq.keys())
    #print(list_seq_avail)
    list_param = list(dict_seq[list_seq_avail[0]].keys())
    list_param.sort()
    #print(list_param)
    for year in list_param:
        str1 = str1 +'\t'+str(year)
    str1+='\n'
    table_str.append(str1)


    for seq_name in list_seq_avail:
        stri = seq_name
        #print(seq_name)
        for param in list_param:
            if param in dict_seq[seq_name].keys():
                stri = stri+'\t'+str(dict_seq[seq_name][param]['rate'])
            else:
                stri = stri+'\tNone'
        stri+='\n'
        table_str.append(stri)

    file_out = open(path_param + 'table_'+mod+'.txt', 'w')
    file_out.writelines(table_str)
    file_out.close()

def plot_rates(dict_seq, path_param, mode):
    seq_names = list(dict_seq.keys())
    params = list(dict_seq[seq_names[0]].keys())
    params.sort()
    params = np.array(params)
    #print(params)
    for seq in seq_names:
        rates = np.empty(1)
        means = np.empty(1)
        sds = np.empty(1)
        #print(rates)
        for param in params:
            rates = np.append(rates, dict_seq[seq][param]['rate'])
            means = np.append(means, dict_seq[seq][param]['mean'])
            sds = np.append(sds, dict_seq[seq][param]['sigma'])
        print(rates)
        print(sds)
        print(means)
        print(params)
        plt.plot(params, rates[1:], linestyle = '-', c='black')
        plt.plot(params, means[1:], linestyle= '-', c = 'red')
        plt.plot(params, means[1:] + sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- sds[1:], linestyle = '--', c='grey')
        plt.plot(params, means[1:] + 2*sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- 2*sds[1:], linestyle = '--', c='grey')
        plt.plot(params, means[1:] + 3*sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- 3*sds[1:], linestyle = '--', c='grey')
        plt.title(seq)
        plt.xlabel(mode)
        plt.ylabel("Substitution rate")
        plt.savefig(path_param + seq + '.png', transparent = True)
        #plt.show()
        plt.close()
        
        
        rates = np.empty(1)
        means = np.empty(1)
        sds = np.empty(1)
        #print(rates)
        for param in params:
            rates = np.append(rates, dict_seq[seq][param]['rate_log'])
            means = np.append(means, dict_seq[seq][param]['mean_log'])
            sds = np.append(sds, dict_seq[seq][param]['sigma_log'])
        print(rates)
        print(sds)
        print(means)
        print(params)
        plt.plot(params, rates[1:], linestyle = '-', c='black')
        plt.plot(params, means[1:], linestyle= '-', c = 'red')
        plt.plot(params, means[1:] + sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- sds[1:], linestyle = '--', c='grey')
        plt.plot(params, means[1:] + 2*sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- 2*sds[1:], linestyle = '--', c='grey')
        plt.plot(params, means[1:] + 3*sds[1:] , linestyle = '--', c='grey')
        plt.plot(params, means[1:]- 3*sds[1:], linestyle = '--', c='grey')
        plt.title(seq)
        plt.xlabel(mode)
        plt.ylabel("Substitution rate")
        plt.savefig(path_param + seq + '_log.png', transparent = True)
        #plt.show()
        plt.close()


#sample_path = 'sample_final/EV71_VP1_cut_4.5.tree'
#sample_path = 'sample_final/genotypeB/genB.tree'

#path for original tree
sample_path = 'D:\\DATA\\samplebias\\biases\\EV-A71_alignments\\B1_biases\\B1nogap.tree'


#folder with trees with changed years
#path_year = 'ful_al/years/'
#path_year = 'genB/years/'
path_year = 'D:\\DATA\\samplebias\\biases\\EV-A71_alignments\\B1_biases\\years\\'


dict_seq_years = get_rates(path_year, sample_path, 'years')
print(dict_seq_years)

print_table(dict_seq_years, path_year, 'years')
plot_rates(dict_seq_years, path_year, '# of added years')


#folder with trees with changed years
#path_mut = 'ful_al/mutations/'
path_mut = 'genB/mutations/'
path_mut = 'D:\\DATA\\samplebias\\biases\\EV-A71_alignments\\B1_biases\\mutations\\'

dict_seq_mut = get_rates(path_mut, sample_path, 'mut')
print(dict_seq_mut)

print_table(dict_seq_mut, path_mut, 'mut')
plot_rates(dict_seq_mut, path_mut, '# of added mutations')

